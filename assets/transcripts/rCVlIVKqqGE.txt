in this Example The Notebook is quite instructive because it refers to a small data set and I think working with small data sets are actually handy in the beginning when you are trying to understand what is going on here we have the classic case of dogs versus cats we have also the simplest possible task in machine learning which is classification image classification in this case and we are going to be using convolutional layers in order to detect no sorry to detect to classify the presence of a dog or a cat on in an image okay or cats in this case all right so the data set is available in kagle the original data set contained 25,000 images but we have cut down to 1,000 images per class and we have a split the data set into train and validation and test data set okay all right so we are going to obviously use train and validation to create if you like our model and of course we are going to exercise some kind of prediction API using our test data set after a model is created so the architecture we're going to be using here is an architecture that we have kind of developed specifically for this example is consist evidently of convolutional and interleaf with Max pulling layers and probably you recognize the API here in this case is a kind of a caras API similar architectures can be develop for py the first layer over here is a convolutional layer the there is input images of 150 by 150 pixels this is what the imag that we have transformed now are and each image is a naturally colored image of three channels red green and blue we have U 3x3 kernels and we have the 32 here indicates the number of filters okay or convolutional neurons and we are going to be using a rectified linear unit they exactly the same nonlinearity that we have used in the fully connected layers then we are passing the output feature map produced here and by the way this is where you can actually see the usage of that kind of formula which I was pointing out regarding the output feature map dimensions in an earlier video the Max pooling layer in this case is 2x two and it will further shrink the output feat M produced by the first layer selecting the most important features out of it passing it over to a convolutional layer with 64 filters here you see now the pattern of increasing the number of filters as the network becomes deeper and deeper and at some point after one two three four layers four convolutional layers we are going to have the head and I think it's worthwhile going back into this vgg kind of architecture and look exactly where that head was in that architecture and couple it with this code so here is the point where the head starts and the head in this case is a concatenation of fully connected layers why we have this kind of concatenation and want do just a single layer is you know gradually even within the head we need to gradually reach this point of desired number of classes we have a classification use case here this is a thousand classes that are need to be present in at the top of the at the end of the of this U Network and this is basically the dimensionality of our posterior probability distribution we're going to have the a y hat if you like that consist of a thousand numbers a thousand are also the are the number of classes in the image net data set so this Dimensions correspond to the image net classifier data set and so that's basically our head there is also seen over here in this code with this portion of the model so we have whatever we have produced in terms of convolutions over here and then we flatten the network so we flatten oh sorry flatten the output feature map there by flattening the output F map we are creating effectively a volume we're taking a volume at the input and we're flattening into a vector VOR and this Vector then is passed as to two dense layers the first dense layer is has 512 neurons it takes whatever dimensionality and we'll see now the dimensions in a moment the flatten layer provided and reduces that just like any fully connected layer we have seen in a corresponding video in a different video earlier into 512 and we use the rectified linear unit for that and then with the subsequent layer takes 512 dimensions and reduces it further into gas into a single Dimension because as we have seen in the binary classification we have a binary classification use case here either we're going to have a cats or dogs we have just a scaler that we need because that is the probability of the positive glass whatever that positive classes probably the dogs here and we are of course going to be using sigmoid because only at the output of the sigmoid we are actually getting this form of the posterior probability as we had discussed in the fully connected layers and in that in that lecture all right so this is basically our architecture very simple architecture the convolution portions the flatten and the fully connected or dense portion to provide the binary classification result at the output and here is the U details of our CNN so we can see the input images that are actually we coming in the first we have 32 filters as we discussed in terms of number of parameters 896 18,000 73,000 147,000 so all of these are parameters that you see being quoted here in the next to the convolutional layers but the most striking thing over here is this look at the number of parameters which are involved in the fully connected in one fully connected or dense layer 3.2 million parameters so out of the total 3 and A2 million parameters that we have 3.2 million are associated with a fully connected layer and here is the kind of striking example of why it would make sense to actually use CNN for image classification if we didn't have the CNN and the associated advantage of that CNN provide which was actually also shown in this kind of snapshot architecture as you can see only the Loc pixels the one which are which are local to the special dimensions of the filter are so so-called firing in order to produce that kind of scaler okay as compared to a fully connected architecture where everything that we have here is going to be connected to the layer to form if you like the output scaler z the convolutions are operation is actually helping us to significantly reduce the number of parameters so at the end of the day we have u the scalar that indicates the posterior probability of the positive class as we discussed and then the architecture is seems to be valid we are going to evidently going to use binary cross entropy just like what we have done earlier in that other video where we looked at dense layers only for binary classification or classification and we are going to have here well here the author selected the RMS prop which is one of the cousins of stochastic gr descent we haven't really got any discussion specifically on enhancements of stochastic gr descent but if you do replace it with SGD I think you will be getting very similar performance with the corresponding learning parameter and then of course the metric is our accuracy and one of the things that we would like to point out in U in this kind of convolution and networks is that we will need to do to be careful when we first take a data set and we try to process the images as we have seen the images are typically given to us as with pixels corresponds to integer numbers so we have to definitely normalize them we have to B them we have to do a lot of this kind of transformations in order for us to produce the right inputs for the for our Network so after a training process that involves multiple epochs as we would expect we have a model and we can actually plot the training and validation loss as well also the corresponding kind of accuracy and look at the corresp responding loss over here plot as the number of epochs and remember what we have said in at the another video regarding the condition of overfitting and at that time the discussion was an example of a linear model on the regression task over here we have a classification task but the sort of problem of over fitting is present in across tasks in machine learning so we see some quite significant difference between training and validation as the accuracy improving and that is really what we have said earlier as an a good indicator of overfitting okay so it seems that the Network that we have designed over here overfits the data set we are given and it shouldn't be a complete surprise to us given the fact that we are throwing a significant number of parameters in a network in a data set which only has a th000 labels per class and so we can actually engage any of the techniques that we have seen in overfitting to address overfitting such as weight Decay any of the regularization techniques that we have seen also in neuron networks to address it but in computer vision we have something else that could actually help us and this is actually called the documentation so I think it's worthwhile going through the data augmentation because it is really a fairly straightforward and widely used approach to avoid the situation such as this where we have overfeeding so in that augmentation what we actually do we are taking the input images and given the fact that we have the knowledge of the class we try to transform these input images in creating more data so that's the an artificial way of increasing the number of labels we have in our data set we have various kind of Transformations we may be shifting rotating images we may sharing the image we have we are zooming in zooming out and flipping and so on we are definitely going to be creating some nasty cats or dogs but definitely this helps our Network to not overfit and so if you are to just keep the exactly the same network chitecture as we have seen earlier not touch at all the model but definitely train the model with this additional kind of data set then look what happened we have a training and validation loss which are very close to each other so we actually have solved the overfeeding problem and our accuracy is both in terms of training and validation are also very close and close to some something like 85% okay so I think this is a good example to showcase the U CNN models as a as working for the simple task of image classification and what we actually also would like to understand now next is what we have said earlier about Hey what how can we have some kind of visualization into the internals of the CNN to understand what is what is actually learning and this is what we will be discussing next 